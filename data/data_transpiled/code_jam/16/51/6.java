static final String solve ( ) {
  final String string ;
  final int parallelism = Integer . parseInt ( System . getProperty ( "java.util.concurrent.atomic.locks.ForkJoinPool.solve" ) ) ;
  final boolean verbose = false ;
  {
    final StringBuilder sb = new StringBuilder ( ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( "Case #" ) . append ( i + 1 ) . append ( ":" ) ;
    sb . append ( string ) ;
    sb . append ( "\n" ) ;
    sb . append ( " Case