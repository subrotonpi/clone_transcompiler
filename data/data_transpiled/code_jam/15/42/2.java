) ")publicstaticdoublesolve(intN,doubleV,doubleX,List<List<Integer>>RC){finalintT=Integer.parseInt(input());for(intt:xrange(T)){finalString[]para=input.split(" ‚ñÅ ");finalintN=Integer.parseInt(para[0]);finaldoubleV=Double.parseDouble(para[1]);finaldoubleX=Double.parseDouble(para[2]);finalList<Integer>mintime=" IMPOSSIBLE ";if(RC.get(0).intValue()>X||RC.get(RC.size()-1).intValue()<X)return" IMPOSSIBLE " ; double maxratio = Double . parseDouble ( rc [ 0 ] ) ; final List < Integer > subRC = new ArrayList < Integer > ( RC ) ; final List < Integer > supRC = new ArrayList < Integer > ( RC ) ; for ( int i = 1 ; i < RC . size ( ) ; i ++ ) { if ( RC . get ( i ) . intValue ( ) == X ) return maxratio ; } final List < Integer > subRC = new ArrayList < Integer > ( RC ) ; for ( int i = 1 ; i < RC . size ( ) ; i ++ ) { if ( RC . get ( i ) . intValue ( ) < X ) return maxratio ; final List < Integer > subRC = new ArrayList < Integer > ( RC ) ; for ( int j = 0 ; j < RC . size ( ) ; j ++ ) { if ( RC . get ( j ) . intValue ( ) == X ) return maxratio ; } final List < Integer > subRC = new ArrayList < Integer > ( RC ) ; for ( int j = 0 ; j < RC . size ( ) ; j ++ ) { if ( RC . get ( j ) . intValue ( ) > X ) return maxratio ; } final int i = subRC . size ( ) ; final int j = supRC . size ( ) ; for ( int j = 0 ; j < i ; j ++ ) { final int k = i + j ; final int v = subRC . get ( j ) . intValue ( ) ; final int i = k + j ; if ( ( v - X ) * k >= ( X - subRC . get ( j ) ) *