static private int fact ( int N ) {
  if ( fbuf . containsKey ( N ) ) return fbuf . get ( N ) ;
  if ( N == 0 ) return 1 ;
  fbuf . put ( N , N * fact ( N - 1 ) ) ;
  return fbuf . get ( N ) ;
}
{
  int M , N ;
  int [ ] S ;
  int [ ] result ;
  int i ;
  int i ;
  int j ;
  int k ;
  int j ;
  int k ;
  int k ;
  int j ;
  int k ;
  int k ;
  int k ;
  int k ;
  int j ;
  int k ;
  int k ;
  int k ;
  int k ;
  int j ;
  int k ;
  int k ;
  int k ;
  int v ;
  int count ;
  /* print */
  char [ ] chars ;
  chars = new char [ N ] ;
  System . arraycopy ( System . in , 0 , chars , 0 , j ) ;
  chars [ k ] = ' ' ;
  chars [ k ] = ' ' ;
  k = Integer . parseInt ( System . in . readLine ( ) . trim ( ) ) ;
  while ( k > 0 ) {
    chars [ k ] = ' ' ;
    chars [ k ] = ' ' ;
    k = Integer . parseInt ( chars [ k ] ) ;
    k = Integer . parseInt ( chars [ k ] ) ;
    j = k ;
    k = Integer . parseInt ( chars [ k ] ) ;
    k = Integer . parseInt ( chars [ k ] ) ;
    j ++ ;
    k = k ;
    k = k ;
    while ( k > 0 ) {
      if ( k > i || k - i > N - remaining ) continue ;
      p += comb ( k , i ) * comb ( N - remaining , k - i ) * count_c ( N , all_c , idx + 1 , remaining - i , buf ) * fact ( i ) * fact ( k - i ) * comb ( k , i ) ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      k = k ;
      