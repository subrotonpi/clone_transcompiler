def _solve ( ) : return
def _solve ( l , fr , R ) :
    if L >= r or l <= R :
        if R == L + 1 :
            return
        return
    M = ( L + R ) / 2
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 * i )
    _solve ( l , fr , 2 *