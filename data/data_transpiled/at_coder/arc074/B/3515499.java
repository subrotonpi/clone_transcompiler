public static double [ ] getDoubleArray ( ) {
  int N = Integer . parseInt ( input . nextLine ( ) ) ;
  int [ ] a = Arrays . stream ( input . nextLine ( ) . split ( " " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ;
  final int [ ] front = new int [ N ] ;
  for ( int i = 0 ;
  i < N ;
  i ++ ) front [ i ] = a [ i ] ;
  HeapSort . sort ( front ) ;
  final int [ ] middle = new int [ N ] ;
  for ( int i = 0 ;
  i < N ;
  i ++ ) middle [ i ] = a [ i ] ;
  final int [ ] back = new int [ N ] ;
  for ( int i = 0 ;
  i < N ;
  i ++ ) back [ i ] = a [ i ] ;
  Arrays . sort ( front ) ;
  final int [ ] sumfront = new int [ N + 1 ] ;
  sumfront [ 0 ] = Integer . parseInt ( Lists . reverse ( front ) ) ;
  for ( int i = 1 ;
  i <= N ;
  i ++ ) sumfront [ i ] = sumfront [ i - 1 ] + middle [ i - 1 ] - HeapSort . sort ( front , middle [ i - 1 ] ) ;
  final int [ ] minusmiddle = new int [ N ] ;
  for ( int i = 0 ;
  i < N ;
  i ++ ) minusmiddle [ i ] = - 1 * middle [ i ] ;
  final int [ ] minusback = new int [ N ] ;
  for ( int i = 0 ;
  i < N ;
  i ++ ) minusback [ i ] = - 1 * Integer . parseInt ( Lists . reverse ( minusback ) ) ;
  for ( int i = N - 1 ;
  i >= 0 ;
  i -- ) sumback [ i ] = sumback [ i + 1 ] + minusmiddle [ i ] - HeapSort . sort ( minusback , minusmiddle [ i ] ) ;
  double ans = - 1 * Double . MAX_VALUE ;
  for ( int i = 0 ;
  i < N + 1 ;
  i ++ ) ans = Math . max ( ans , sumfront [ i ] + sumback [ i ] ) ;
  System . out . println ( ans ) ;
  return a ;
}
